@model CloudServiceTest.Models.UsersViewModel

<style>
	.container {
		display: flex;
		width: 1500px;
	}

	.left-div {
		width: 35%;
		background-color: lightgoldenrodyellow;
	}

	.right-div {
		width: 65%;
		background-color: lightcoral;
	}

	.chat-area {
		width: 100%;
		height: 400px;
		overflow-y: auto;
		background-color: lightblue;
	}

	.input-area {
		width: 100%;
		height: 200px;
	}
</style>


<h2>Chat page</h2>

<div class="container">

	<div class="left-div">
		@foreach (var user in Model.Users)
		{
			<button class="SelectUser" userId="@user.Id">@user.UserName</button>

			<br />
		}
	</div>

	<div class="right-div">
		<h4 id="OppositeUser" style="text-align: center;">Name</h4>
		<div class="chat-area" id="chatArea">
		<!-- Messages will appear here -->
		</div>
		<textarea class="input-area" id="inputArea"></textarea>
		<button id="SendMessage">Send</button>
	</div>

</div>

<script>
	// //close chat Floating window
	// document.addEventListener("DOMContentLoaded", function () {
	// 	var chatbox = document.getElementById("chatbox");
	// 	if (chatbox) {
	// 		chatbox.style.display = "none";
	// 	}
	// });

	var selectUserButtons = document.querySelectorAll(".SelectUser");
	var oppositeUserName = document.getElementById("OppositeUser");
	var chatArea = document.getElementById("chatArea");
	var inputArea = document.getElementById("inputArea");
	var oppositeUserId = null;
	var sendButton = document.getElementById("SendMessage");
	sendButton.addEventListener("click", function () {
		sendMessage();
	});

	selectUserButtons.forEach(function (button) {
		button.addEventListener("click", function () { 
			selectUser(button.getAttribute("userId"),button.innerHTML);
		});
	});

	function selectUser(userId,userName) {
		oppositeUserName.textContent = userName;
		if (oppositeUserId != userId){
			oppositeUserId = userId;
			RefreshChatArea();
		}

	}

	function sendMessage() {
		if (inputArea.value === null || inputArea.value === '') {
			return;
		}

		let message = inputArea.value;
		inputArea.value = '';
		connection.invoke("SendMessage", '@Model.SelfUser.Id', oppositeUserId, message).catch(function (err) {
			return console.error(err.toString());
		});

	}

	connection.on("ReceiveMessage", function (messageId) {
		callGetMessageById(messageId);
	});

	async function callGetMessageById(messageId){
		data = await getMessageById(messageId);

		if (oppositeUserId != data.senderId && oppositeUserId != data.receiverId) {
			return;
		}

		if ("@Model.SelfUser.Id" == data.senderId) {
			ShowSendMessage(data);
		}
		if ("@Model.SelfUser.Id" == data.receiverId) {
			ShowReceiveMessage(data);
		}
		
	}

	function ShowSendMessage(data)
	{
		const msg = 'You: ' + data.content + "<br>" + data.dateTime;
		const li = document.createElement("li");
		li.style.textAlign = "right";
		const span = document.createElement("span");
		span.innerHTML = msg;
		span.style.backgroundColor = "lightgreen";
		li.appendChild(span);
		chatArea.appendChild(li);

		chatArea.scrollTop = chatArea.scrollHeight;
	}

	function ShowReceiveMessage(data)
	{
		const li = document.createElement("li");
		let msg = "Opposite: " + data.content + "<br>" + data.dateTime;
		const span = document.createElement("span");
		span.innerHTML = msg;
		span.style.backgroundColor = "white";
		li.appendChild(span);
		chatArea.appendChild(li);

		chatArea.scrollTop = chatArea.scrollHeight;
	}

	function RefreshChatArea() {
		chatArea.innerHTML = '';
		callGetMessagesOfTwoUser('@Model.SelfUser.Id', oppositeUserId);
	}

	async function callGetMessagesOfTwoUser(selfId, oppositeUserId) {
		list = await getMessagesOfTwoUser(selfId, oppositeUserId);
		

		list.forEach(function (item) {
			if ("@Model.SelfUser.Id" == item.senderId) {
				ShowSendMessage(item);
			}
			if ("@Model.SelfUser.Id" == item.receiverId) {
				ShowReceiveMessage(item);
			}
		});
		chatArea.scrollTop = chatArea.scrollHeight;
	}

</script>