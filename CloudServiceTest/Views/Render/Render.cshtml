
	
<canvas id="glCanvas" width="640" height="480"></canvas>
<script src="~/js/indexedDB.js"></script>
<script src="~/js/gl-matrix.js"></script>
<script src="~/js/render.js"></script>
<p>
	
</p>

<script>
	const renderingConnection = new signalR.HubConnectionBuilder()
		.withUrl("/renderingHub?pageId=page1")
		.build();

	renderingConnection.start().then(() => {
		console.log("Connected with connectionId:", renderingConnection.connectionId);
	});

	renderingConnection.on("CreateModel", function (message) {
		const model = JSON.parse(message);
		const data = JSON.parse(model.data);

		createVertexBuffer(model.name, data);
	});

	renderingConnection.on("CreateTexture", function (message) {
		const texture = JSON.parse(message);

		createTexture(texture.name, texture.data);
	});

	renderingConnection.on("CreateObject3D", function (message) {
		const data = JSON.parse(message);

		createObject3D(data);
	});

	function requireResource(msgType, message) {
		renderingConnection.invoke("RequireResource", renderingConnection.connectionId, msgType, message).
		catch(function (err) {
			return console.error(err.toString());
		});
	}

	requestResource = requireResource;

	var indexedDB = null;

	startInit();

	var lastTime = 0;

	function renderLoop(time)
	{
		const deltaTime = time - lastTime;
		lastTime = time;

		update(deltaTime);

		requestAnimationFrame(renderLoop);
	}

	function update(deltaTime) {
		testRoot(deltaTime);
	}
		


	async function startInit() {
		indexedDB = IndexedDB.getDB("Rendering");

		await initWebGL();

		requestAnimationFrame(renderLoop);
	}

</script>